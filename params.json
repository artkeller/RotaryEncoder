{"name":"RotaryEncoder","tagline":"Rotary Encoder debounced","body":"# RotaryEncoder - debounced \r\n\r\nRotary Encoder Library for measuring quadrature encoded signals\r\n\r\n## MCU\r\n\r\nARDUINO Family\r\n\r\n## Synopsis\r\n\r\n\t#include \"RotaryEncoder.h\"\r\n\r\n\t// -- Default initializing of Rotary Encoder\r\n\t//    CLK = pin 3, DAT = pin 2, SW = pin A1, CW = count up, CCW = count down\r\n\t//    One instance only is allowed due to plain ISR usage with global data\r\n\tRotaryEncoder rotaryEncoder = RotaryEncoder();  \r\n\r\n \t// -- Aternative initialization\r\n\t//    Individual initializing of Rotary Encoder\r\n\t//    CLK = pin 2, DAT = pin 3, SW = pin 4, CW = count down, CCW = count up`\r\n \tRotaryEncoder rotaryEncoder = RotaryEncoder(2,3,4);\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n \t// -- Apply Rotary Encoder methods\r\n \tvoid loop() {  \r\n\t  ...\r\n \t  // -- Has to be inside loop() to enable rotary debouncer\r\n\t  rotaryEncoder.startDebouncer();\r\n\t  // -- Enable Button to clear recent encoder position if pushed, set to 0\r\n\t  rotaryEncoder.updateClearButton(); \r\n\r\n \t  // -- Verify if encoder position has changed\r\n \t  if (rotaryEncoder.hasChanged()) { \r\n \t  // -- Update counter for the dial (values 0..15)\r\n \t    volatile byte encoderPos = rotaryEncoder.encodedPos() % 16;\t\r\n \t    do_something_with(encoderPos);\r\n   \t  }\r\n  \t  ...\r\n \t}\r\n\r\n\r\n## Description\t\r\n\r\nRotary Encoder Library for measuring quadrature encoded signals\r\n\r\n## Examples\r\n\r\nFor KY-040 Rotary Encoder Module\r\n\r\nWeb Search String:\r\n\"ky-040 rotary decoder encoder module for arduino\"\r\n\r\n* [E00 KY-040 Rotary Encoder Demo w/o \"RotaryEncoder.h\"](https://github.com/artkeller/RotaryEncoder/tree/master/RotaryEncoder/examples/E00_KY-040_RotaryEncoder)\r\n* [E01 KY-040 Rotary Encoder Demo w/ \"RotaryEncoder.h\"](https://github.com/artkeller/RotaryEncoder/tree/master/RotaryEncoder/examples/E01_KY-040_RotaryEncoder)\r\n* [E02 KY-040 Rotary Encoder Demo w/ \"RotaryEncoder.h\"](https://github.com/artkeller/RotaryEncoder/tree/master/RotaryEncoder/examples/E02_KY-040_RotaryEncoder)\r\n \r\n## Disclaimer \r\n\r\nThe library is tested with some ARV Arduino only. It may possibly work with other MCUs.\r\n\r\n## Acklowledgement\r\n  \r\nThis code was inspired by\r\n\r\n1. \"Another Interrupt Library THAT REALLY WORKS\" by rafbuff\r\nhttp://playground.arduino.cc/Main/RotaryEncoders\r\n\r\n2. \"Encoder Library, for measuring quadrature encoded signals\" by Paul Stoffregen\r\nhttp://www.pjrc.com/teensy/td_libs_Encoder.html\r\n\t\r\nThanks to all.\r\n\r\n## Copyright\t\r\n\r\nCopyright (c) 2015 Thomas Walloschke. All rigths reserved.\r\n\r\n## Licence\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}